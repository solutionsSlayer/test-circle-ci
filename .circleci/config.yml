version: 2.1
orbs:
  node: circleci/node@5

##########################################
# REUSABLE COMMANDS
##########################################
commands:
  setup_environment:
    description: "Set up the Node.js environment and install dependencies"
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
          cache-path: ~/project/node_modules
          cache-version: v1
          override-ci-command: npm ci

  install_vercel_cli:
    description: "Install Vercel CLI for deployments"
    steps:
      - run:
          name: Install Vercel CLI
          command: |
            sudo npm install -g vercel@latest || npm install --no-global vercel@latest
            export PATH="$PATH:$(npm bin)"

  save_test_results:
    description: "Save test results and artifacts"
    steps:
      - store_test_results:
          path: ./test-results/
      - store_artifacts:
          path: ./coverage
          destination: coverage-report

##########################################
# BUILD STAGE JOBS
##########################################
jobs:
  install_dependencies:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - package.json
            - package-lock.json

  code_analysis:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run ESLint
          command: npm run lint || echo "Linting issues detected"
      - run:
          name: Check formatting with Prettier
          command: npx prettier --check "**/*.{js,jsx,ts,tsx}" || echo "Formatting issues detected"
      - store_artifacts:
          path: eslint-results.json
          destination: lint-results
      
  build_application:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build application
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .next
            - public

##########################################
# TEST STAGE JOBS
##########################################
  unit_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run unit tests
          command: npm run test:ci
      - save_test_results

  integration_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run integration tests
          command: echo "Running integration tests..."
      - save_test_results

  regression_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run regression tests
          command: echo "Running regression tests..."
      - save_test_results

  accessibility_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run accessibility tests
          command: echo "Running accessibility tests..."
          
  security_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run dependency vulnerability scan
          command: npm audit --production || echo "Vulnerabilities found"

##########################################
# DEPLOYMENT STAGE JOBS
##########################################
  prepare_deployment:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Prepare for deployment
          command: echo "Preparing deployment environment..."

  deploy_development:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Pull Vercel Environment Information
          command: vercel pull --yes --environment=preview --token=${VERCEL_TOKEN}
      - run:
          name: Build Project Artifacts
          command: vercel build --token=${VERCEL_TOKEN}
      - run:
          name: Deploy to Development Environment
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            CLEAN_BRANCH=$(echo $BRANCH_NAME | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]')
            
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${VERCEL_TOKEN} --yes)
            echo "Development deployment available at: $DEPLOYMENT_URL"
            
            ALIAS_NAME="nextjs-calculator-dev-${CLEAN_BRANCH}"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Development deployment with alias available at: $ALIASED_URL"
            echo "export DEV_URL=$ALIASED_URL" >> $BASH_ENV
      - run:
          name: Notify PR (if applicable)
          command: |
            if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
              PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"body\":\"Development deployment available at: $DEV_URL\"}" \
                "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
            fi

  deploy_integration:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Pull Vercel Environment Information
          command: vercel pull --yes --environment=preview --token=${VERCEL_TOKEN}
      - run:
          name: Build Project Artifacts
          command: vercel build --token=${VERCEL_TOKEN}
      - run:
          name: Deploy to Integration Environment
          command: |
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${VERCEL_TOKEN})
            echo "Integration deployment available at: $DEPLOYMENT_URL"
            
            ALIAS_NAME="nextjs-calculator-integration"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Integration deployment with alias available at: $ALIASED_URL"
            echo "export INTEGRATION_URL=$ALIASED_URL" >> $BASH_ENV
      - run:
          name: Run verification tests
          command: echo "Running post-deployment verification tests..."
      - run:
          name: Run functional validation
          command: echo "Running functional validation tests..."

  deploy_production:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Pull Vercel Production Environment Information
          command: vercel pull --yes --environment=production --token=${VERCEL_TOKEN}
      - run:
          name: Build Production Project Artifacts
          command: vercel build --prod --token=${VERCEL_TOKEN}
      - run:
          name: Deploy to Production Environment
          command: |
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${VERCEL_TOKEN})
            echo "Production deployment available at: $DEPLOYMENT_URL"
            
            ALIAS_NAME="nextjs-calculator"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Production deployment with alias available at: $ALIASED_URL"
      - run:
          name: Run production verification
          command: echo "Running production verification tests..."
      - run:
          name: Setup monitoring
          command: echo "Setting up production monitoring and alerts..."

  load_testing:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run load tests
          command: echo "Running load tests on deployed environment..."
      - store_artifacts:
          path: ./load-test-results
          destination: load-test-results

##########################################
# WORKFLOW DEFINITIONS
##########################################
workflows:
  version: 2
  
  # Main GitFlow CI/CD pipeline
  gitflow_pipeline:
    jobs:
      # BUILD STAGE - Runs on all branches
      - install_dependencies
      - code_analysis:
          requires:
            - install_dependencies
      - build_application:
          requires:
            - code_analysis

      # TEST STAGE - Some tests depend on branch type
      - unit_tests:
          requires:
            - build_application
      - integration_tests:
          requires:
            - unit_tests
          filters:
            branches:
              ignore: /^feature.*/
      - regression_tests:
          requires:
            - integration_tests
          filters:
            branches:
              only: 
                - develop
                - integration
                - main
      - security_tests:
          requires:
            - build_application
          filters:
            branches:
              only: 
                - develop
                - integration
                - main
      - accessibility_tests:
          requires:
            - unit_tests
          filters:
            branches:
              only: 
                - develop
                - integration
                - main

      # DEPLOYMENT STAGE - Environment-specific deployments
      - prepare_deployment:
          requires:
            - unit_tests
      
      # Feature branch deployments
      - deploy_development:
          requires:
            - prepare_deployment
          filters:
            branches:
              only: /^feature.*/

      # Develop branch deployments
      - deploy_development:
          name: deploy_to_dev_environment
          requires:
            - integration_tests
            - prepare_deployment
          filters:
            branches:
              only: develop

      # Integration branch deployments
      - deploy_integration:
          requires:
            - regression_tests
            - security_tests
            - accessibility_tests
            - prepare_deployment
          filters:
            branches:
              only: integration
      
      # Main branch deployment process
      - deploy_integration:
          name: deploy_to_staging
          requires:
            - regression_tests
            - security_tests
            - accessibility_tests
            - prepare_deployment
          filters:
            branches:
              only: main
              
      - approve_production:
          type: approval
          requires:
            - deploy_to_staging
          filters:
            branches:
              only: main
              
      - deploy_production:
          requires:
            - approve_production
          filters:
            branches:
              only: main
              
      - load_testing:
          requires:
            - deploy_production
          filters:
            branches:
              only: main

  # Hotfix specific workflow
  hotfix_pipeline:
    jobs:
      - install_dependencies:
          filters:
            branches:
              only: /^hotfix.*/
      - code_analysis:
          requires:
            - install_dependencies
          filters:
            branches:
              only: /^hotfix.*/
      - build_application:
          requires:
            - code_analysis
          filters:
            branches:
              only: /^hotfix.*/
      - unit_tests:
          requires:
            - build_application
          filters:
            branches:
              only: /^hotfix.*/
      - security_tests:
          requires:
            - build_application
          filters:
            branches:
              only: /^hotfix.*/
      - prepare_deployment:
          requires:
            - unit_tests
            - security_tests
          filters:
            branches:
              only: /^hotfix.*/
      - deploy_development:
          name: deploy_hotfix_preview
          requires:
            - prepare_deployment
          filters:
            branches:
              only: /^hotfix.*/