version: 2.1
orbs:
  node: circleci/node@5

##########################################
# REUSABLE COMMANDS
##########################################
commands:
  setup_environment:
    description: "Set up the Node.js environment and install dependencies"
    steps:
      - checkout
      # Restore caches more efficiently
      - restore_cache:
          keys:
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            - v1-npm-deps-
      - node/install-packages:
          pkg-manager: npm
          cache-path: ~/project/node_modules
          cache-version: v1
          override-ci-command: npm ci
      # Save dependencies cache
      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  install_vercel_cli:
    description: "Install Vercel CLI for deployments"
    steps:
      - run:
          name: Install Vercel CLI
          command: |
            sudo npm install -g vercel@latest || npm install --no-global vercel@latest
            export PATH="$PATH:$(npm bin)"

  save_test_results:
    description: "Save test results and artifacts"
    steps:
      - store_test_results:
          path: ./test-results/
      - store_artifacts:
          path: ./coverage
          destination: coverage-report

  cache_next_build:
    description: "Cache Next.js build files"
    steps:
      - save_cache:
          key: v1-next-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - .next
            - .vercel/output

  restore_next_build:
    description: "Restore Next.js build files from cache"
    steps:
      - restore_cache:
          keys:
            - v1-next-build-{{ .Branch }}-{{ .Revision }}
            - v1-next-build-{{ .Branch }}-
            - v1-next-build-

##########################################
# BUILD STAGE JOBS
##########################################
jobs:
  install_dependencies:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - package.json
            - package-lock.json

  code_analysis:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Cache eslint results
      - restore_cache:
          keys:
            - v1-eslint-cache-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-eslint-cache-{{ .Branch }}-
            - v1-eslint-cache-
      - run:
          name: Run ESLint
          command: npm run lint || echo "Linting issues detected"
      - run:
          name: Check formatting with Prettier
          command: npx prettier --check "**/*.{js,jsx,ts,tsx}" || echo "Formatting issues detected"
      - save_cache:
          key: v1-eslint-cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - .eslintcache
      - store_artifacts:
          path: eslint-results.json
          destination: lint-results
      
  build_application:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_next_build
      # Add a timestamp to detect incremental builds
      - run:
          name: Check for incremental build
          command: |
            if [ -d ".next" ]; then
              echo "Using incremental build"
            else
              echo "Using full build"
            fi
      - run:
          name: Build application
          command: npm run build
      - cache_next_build
      - persist_to_workspace:
          root: .
          paths:
            - .next
            - public
            - .vercel/output

##########################################
# TEST STAGE JOBS
##########################################
  unit_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Cache jest results
      - restore_cache:
          keys:
            - v1-jest-cache-{{ .Branch }}-{{ checksum "package.json" }}
            - v1-jest-cache-{{ .Branch }}-
            - v1-jest-cache-
      - run:
          name: Run unit tests
          command: npm run test:ci
      - save_cache:
          key: v1-jest-cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - .jest-cache
      - save_test_results

  integration_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run integration tests
          command: echo "Running integration tests..."
      - save_test_results

  regression_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run regression tests
          command: echo "Running regression tests..."
      - save_test_results

  accessibility_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run accessibility tests
          command: echo "Running accessibility tests..."
          
  security_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Cache security data
      - restore_cache:
          keys:
            - v1-security-cache-{{ checksum "package-lock.json" }}
            - v1-security-cache-
      - run:
          name: Run dependency vulnerability scan
          command: npm audit --production || echo "Vulnerabilities found"
      - save_cache:
          key: v1-security-cache-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm/_cacache

##########################################
# DEPLOYMENT STAGE JOBS
##########################################
  prepare_deployment:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Prepare for deployment
          command: echo "Preparing deployment environment..."
      # Cache vercel config
      - save_cache:
          key: v1-vercel-config-{{ .Branch }}-{{ .Revision }}
          paths:
            - .vercel

  deploy_development:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      # Restauration du cache Vercel
      - restore_cache:
          keys:
            - v1-vercel-config-{{ .Branch }}-{{ .Revision }}
            - v1-vercel-config-{{ .Branch }}-
            - v1-vercel-config-
      - run:
          name: Pull Vercel Environment Information
          command: vercel pull --yes --environment=preview --token=${VERCEL_TOKEN}
      - run:
          name: Build Project Artifacts
          command: vercel build --token=${VERCEL_TOKEN}
      - run:
          name: Deploy to Development Environment
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            CLEAN_BRANCH=$(echo $BRANCH_NAME | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]')
            
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${VERCEL_TOKEN} --yes)
            echo "Development deployment available at: $DEPLOYMENT_URL"
            
            ALIAS_NAME="nextjs-calculator-dev-${CLEAN_BRANCH}"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Development deployment with alias available at: $ALIASED_URL"
            echo "export DEV_URL=$ALIASED_URL" >> $BASH_ENV
      - run:
          name: Notify PR (if applicable)
          command: |
            if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
              PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"body\":\"Development deployment available at: $DEV_URL\"}" \
                "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
            fi

  deploy_integration:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      # Restauration du cache Vercel
      - restore_cache:
          keys:
            - v1-vercel-config-{{ .Branch }}-{{ .Revision }}
            - v1-vercel-config-{{ .Branch }}-
            - v1-vercel-config-
      - run:
          name: Pull Vercel Environment Information
          command: vercel pull --yes --environment=preview --token=${VERCEL_TOKEN}
      - run:
          name: Build Project Artifacts
          command: vercel build --token=${VERCEL_TOKEN}
      - run:
          name: Deploy to Integration Environment
          command: |
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${VERCEL_TOKEN})
            echo "Integration deployment available at: $DEPLOYMENT_URL"
            
            ALIAS_NAME="nextjs-calculator-integration"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Integration deployment with alias available at: $ALIASED_URL"
            echo "export INTEGRATION_URL=$ALIASED_URL" >> $BASH_ENV
      - run:
          name: Run verification tests
          command: echo "Running post-deployment verification tests..."
      - run:
          name: Run functional validation
          command: echo "Running functional validation tests..."

  deploy_production:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_vercel_cli
      # Restauration du cache Vercel
      - restore_cache:
          keys:
            - v1-vercel-config-{{ .Branch }}-{{ .Revision }}
            - v1-vercel-config-{{ .Branch }}-
            - v1-vercel-config-
      - run:
          name: Pull Vercel Production Environment Information
          command: vercel pull --yes --environment=production --token=${VERCEL_TOKEN}
      - run:
          name: Build Production Project Artifacts
          command: vercel build --prod --token=${VERCEL_TOKEN}
      - run:
          name: Deploy to Production Environment
          command: |
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${VERCEL_TOKEN})
            echo "Production deployment available at: $DEPLOYMENT_URL"
            
            # Alias production
            ALIAS_NAME="nextjs-calculator-${CIRCLE_PROJECT_USERNAME}"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN} || echo "Could not set alias, but deployment is still available at $DEPLOYMENT_URL"
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Production deployment with alias available at: $ALIASED_URL (if alias was successful)"
      - run:
          name: Run production verification
          command: echo "Running production verification tests..."
      - run:
          name: Setup monitoring
          command: echo "Setting up production monitoring and alerts..."

  load_testing:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run load tests
          command: echo "Running load tests on deployed environment..."
      - store_artifacts:
          path: ./load-test-results
          destination: load-test-results

  # New job for synchronizing hotfix changes with develop and integration branches
  sync_branches:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - checkout
      - run:
          name: Configure Git
          command: |
            git config --global user.email "ci-bot@example.com"
            git config --global user.name "CircleCI Bot"
      - add_ssh_keys:
          fingerprints:
            - "${SSH_KEY_FINGERPRINT}"  # Configure this in CircleCI project settings
      - run:
          name: Setup SSH for Git operations
          command: |
            mkdir -p ~/.ssh
            echo 'Host *
              StrictHostKeyChecking no' > ~/.ssh/config
            chmod 600 ~/.ssh/config
      - run:
          name: Sync integration branch
          command: |
            # Get current hotfix branch name
            HOTFIX_BRANCH=${CIRCLE_BRANCH}
            echo "Syncing from hotfix branch: $HOTFIX_BRANCH"
            
            # Sync with integration branch
            git fetch origin
            git checkout integration || git checkout -b integration origin/integration
            git pull origin integration
            git merge --no-edit ${HOTFIX_BRANCH} || {
              echo "⚠️ Merge conflict detected, attempting to resolve..."
              # In case of conflicts, prefer hotfix changes
              git checkout --theirs .
              git add .
              git commit -m "Merge hotfix ${HOTFIX_BRANCH} into integration (auto-resolved conflicts)"
            }
            git push origin integration
      - run:
          name: Sync develop branch
          command: |
            # Get current hotfix branch name
            HOTFIX_BRANCH=${CIRCLE_BRANCH}
            
            # Sync with develop branch
            git fetch origin
            git checkout develop || git checkout -b develop origin/develop
            git pull origin develop
            git merge --no-edit ${HOTFIX_BRANCH} || {
              echo "⚠️ Merge conflict detected, attempting to resolve..."
              # In case of conflicts, prefer hotfix changes
              git checkout --theirs .
              git add .
              git commit -m "Merge hotfix ${HOTFIX_BRANCH} into develop (auto-resolved conflicts)"
            }
            git push origin develop
      - run:
          name: Notify successful sync
          command: |
            echo "Successfully synchronized hotfix with integration and develop branches"
            
            if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
              PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"body\":\"Hotfix has been successfully deployed to production and synchronized with integration and develop branches.\"}" \
                "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
            fi

##########################################
# WORKFLOW DEFINITIONS
##########################################
workflows:
  version: 2
  
  # master GitFlow CI/CD pipeline
  gitflow_pipeline:
    when:
      not:
        matches:
          pattern: "^hotfix.*"
          value: << pipeline.git.branch >>
    jobs:
      # BUILD STAGE - Runs on all branches
      - install_dependencies:
          filters:
            branches:
              ignore: /^hotfix.*/
      - code_analysis:
          requires:
            - install_dependencies
      - build_application:
          requires:
            - code_analysis

      # TEST STAGE - Some tests depend on branch type
      - unit_tests:
          requires:
            - build_application
      - integration_tests:
          requires:
            - unit_tests
          filters:
            branches:
              ignore: /^feature.*/
      - regression_tests:
          requires:
            - integration_tests
          filters:
            branches:
              only: 
                - develop
                - integration
                - master
      - security_tests:
          requires:
            - build_application
          filters:
            branches:
              only: 
                - develop
                - integration
                - master
      - accessibility_tests:
          requires:
            - unit_tests
          filters:
            branches:
              only: 
                - develop
                - integration
                - master

      # DEPLOYMENT STAGE - Environment-specific deployments
      - prepare_deployment:
          requires:
            - unit_tests
          filters:
            branches:
              ignore: /^feature.*/
      
      # Develop branch deployments
      - deploy_development:
          name: deploy_to_dev_environment
          requires:
            - integration_tests
            - prepare_deployment
          filters:
            branches:
              only: develop

      # Integration branch deployments
      - deploy_integration:
          requires:
            - regression_tests
            - security_tests
            - accessibility_tests
            - prepare_deployment
          filters:
            branches:
              only: integration
      
      # master branch deployment process
      - approve_production:
          type: approval
          requires:
            - regression_tests
            - security_tests
            - accessibility_tests
            - prepare_deployment
          filters:
            branches:
              only: master
              
      - deploy_production:
          requires:
            - approve_production
          filters:
            branches:
              only: master
              
      - load_testing:
          requires:
            - deploy_production
          filters:
            branches:
              only: master

  # Hotfix specific workflow
  hotfix_pipeline:
    jobs:
      - install_dependencies:
          filters:
            branches:
              only: /^hotfix.*/
      - code_analysis:
          requires:
            - install_dependencies
          filters:
            branches:
              only: /^hotfix.*/
      - build_application:
          requires:
            - code_analysis
          filters:
            branches:
              only: /^hotfix.*/
      - unit_tests:
          requires:
            - build_application
          filters:
            branches:
              only: /^hotfix.*/
      - security_tests:
          requires:
            - build_application
          filters:
            branches:
              only: /^hotfix.*/
      - prepare_deployment:
          requires:
            - unit_tests
            - security_tests
          filters:
            branches:
              only: /^hotfix.*/
      - deploy_development:
          name: deploy_hotfix_preview
          requires:
            - prepare_deployment
          filters:
            branches:
              only: /^hotfix.*/
      
      - deploy_production:
          name: deploy_hotfix_to_production
          requires:
            - deploy_hotfix_preview
          filters:
            branches:
              only: /^hotfix.*/
      
      # New job to synchronize branches after hotfix deployment
      - sync_branches:
          requires:
            - deploy_hotfix_to_production
          filters:
            branches:
              only: /^hotfix.*/