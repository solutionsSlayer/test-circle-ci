version: 2.1
orbs:
  node: circleci/node@5

# Reusable command definitions
commands:
  setup_environment:
    description: "Set up the Node.js environment"
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
          cache-path: ~/project/node_modules
          cache-version: v1
          override-ci-command: npm ci

  # Added a reusable command for Vercel CLI installation
  install_vercel_cli:
    description: "Install Vercel CLI without permission issues"
    steps:
      - run:
          name: Install Vercel CLI
          command: |
            sudo npm install -g vercel@latest || npm install --no-global vercel@latest
            # Ensure vercel is available in the PATH
            export PATH="$PATH:$(npm bin)"

jobs:
  # Builds the application and creates artifacts that can be used by subsequent jobs
  build:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - run:
          name: Build application
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .next
            - node_modules
            - public

  # Performs static code analysis to ensure code quality standards
  lint:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - attach_workspace:
          at: .
      - run:
          name: Run ESLint
          command: npm run lint || true
      - run:
          name: Check formatting with Prettier
          command: npx prettier --check "**/*.{js,jsx,ts,tsx}" || true
      - store_artifacts:
          path: eslint-results.json
          destination: lint-results

  # Runs automated tests to verify functionality and prevent regressions
  unit_tests:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - attach_workspace:
          at: .
      - run:
          name: Run unit tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/
      - store_artifacts:
          path: ./coverage
          destination: coverage

  # Deploys to the development environment when changes are merged to develop
  deploy_development:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Deploy to Development
          command: |
            # Extract branch name for use in URL
            BRANCH_NAME=${CIRCLE_BRANCH}
            # Create a cleaner version of branch name for URL (remove special chars)
            CLEAN_BRANCH=$(echo $BRANCH_NAME | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]')
            
            # First deploy to get the URL
            DEPLOYMENT_URL=$(vercel deploy --token=${VERCEL_TOKEN} --yes)
            echo "Development deployment available at: $DEPLOYMENT_URL"
            
            # Then create an alias for the deployment
            ALIAS_NAME="with-jest-circle-ci-dev-${CLEAN_BRANCH}"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            # Create the URL with the alias for use in PR comments
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Development deployment with alias available at: $ALIASED_URL"
            echo "export DEV_URL=$ALIASED_URL" >> $BASH_ENV
      - run:
          name: Comment on PR
          command: |
            if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
              PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"body\":\"Development deployment available at: $DEV_URL\"}" \
                "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
            fi

  # Deploys to the integration/pre-prod environment when PRs are made to master
  deploy_integration:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Deploy to Integration/Pre-Prod
          command: |
            vercel pull --yes --environment=preview --token=${VERCEL_TOKEN}
            vercel build --token=${VERCEL_TOKEN}
            
            # First deploy to get the URL
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${VERCEL_TOKEN})
            echo "Integration deployment available at: $DEPLOYMENT_URL"
            
            # Then create an alias for the deployment
            ALIAS_NAME="with-jest-circle-ci-integration"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            # Create the URL with the alias for use in PR comments
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Integration deployment with alias available at: $ALIASED_URL"
            echo "export INTEGRATION_URL=$ALIASED_URL" >> $BASH_ENV
      - run:
          name: Comment on PR
          command: |
            if [[ -n "$CIRCLE_PULL_REQUEST" ]]; then
              PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"body\":\"Integration deployment available at: $INTEGRATION_URL\"}" \
                "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
            fi

  # Deploys to the production environment after manual approval
  deploy_production:
    executor: 
      name: node/default
      tag: '18.18'
    steps:
      - setup_environment
      - attach_workspace:
          at: .
      - install_vercel_cli
      - run:
          name: Deploy to Production
          command: |
            vercel pull --yes --environment=production --token=${VERCEL_TOKEN}
            vercel build --prod --token=${VERCEL_TOKEN}
            
            # First deploy to get the URL
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${VERCEL_TOKEN})
            echo "Production deployment available at: $DEPLOYMENT_URL"
            
            # Then create an alias for the deployment
            ALIAS_NAME="with-jest-circle-ci"
            vercel alias set $DEPLOYMENT_URL $ALIAS_NAME --token=${VERCEL_TOKEN}
            
            # Create the URL with the alias for production
            ALIASED_URL="https://$ALIAS_NAME.vercel.app"
            echo "Production deployment with alias available at: $ALIASED_URL"

workflows:
  version: 2
  # GitFlow CI/CD pipeline
  gitflow-pipeline:
    jobs:
      # Common steps for all branches: build, lint, test
      - build
      - lint:
          requires:
            - build
      - unit_tests:
          requires:
            - lint

      # Deploy to development environment from develop branch
      - deploy_development:
          requires:
            - unit_tests
          filters:
            branches:
              only: develop

      # Deploy to integration/pre-prod from master branch PRs
      - deploy_integration:
          requires:
            - unit_tests
          filters:
            branches:
              only: master

      # Manual approval for production deployment
      - approve_production:
          type: approval
          requires:
            - deploy_integration
          filters:
            branches:
              only: master

      # Deploy to production after approval
      - deploy_production:
          requires:
            - approve_production
          filters:
            branches:
              only: master